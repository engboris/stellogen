(macro (spec X Y) (:= X Y))
(macro (stack A B) (A B))
(macro (stack A B C ...) (A (stack B C ...)))

(:= 1 (+nat (s 0)))
(:= 2 (+nat (stack s s 0)))
(:= 3 (+nat (stack s s s 0)))

(spec nat [(-nat (s X)) (+nat X)])

(:= tested @(fire @#1 #nat))
(== #tested (+nat 0))

(:= tested @(fire @#2 #nat))
(== #tested (+nat (s 0)))

(:= tested @(fire @#3 #nat))
(== #tested (+nat (stack s s 0)))
