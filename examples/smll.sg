(new-declaration (spec X Y) (:= X Y))
(new-declaration (:: Tested Test)
  (== @(interact #Tested #Test) ok))

' test of linear identity
(spec (larrow a a) {
  [+testrl [
    [-1 -2 +c5]
    [-3] [-4 +c6]
    [-c5 +7] [-c6]
    @[-7 ok]]]
  [+testrr [
    [-1 -2 +c5]
    [-3] [-4 +c6]
    [-c5] [+7 -c6]
    @[-7 ok]]]
  [+testll [
    [-1 -2 +c5]
    [-4] [-3 +c6]
    [-c5 +7] [-c6]
    @[-7 ok]]]
  [+testlr [
    [-1 -2 +c5]
    [-4] [-3 +c6]
    [-c5] [+7 -c6]
    @[-7 ok]]]})

(:= id { [+1 +3] [+2 +4]})
'TODO (:: id (larrow a a))

'cut-elimination
(:= ps1 {
  [+vehicle [
    [+1 +2]
    @[3 +4]
    [+5 6]
  ]]
  [+cuts [
    [-1 -4]
    [-2 -5]
  ]]
})

(:= vehicle (eval (interact #ps1 @[-vehicle])))
(:= cuts    (eval (interact #ps1 @[-cuts])))

(show (interact #vehicle #cuts))

(spec (tens a b) {
  [-1 -2 +3]
  @[-3 ok]})

(new-declaration (::lin Tested Test)
  (== @(fire #Tested #Test) ok))

(:= vehicle [+1 +2])
' does not typecheck
' (::lin vehicle (tens a a)
