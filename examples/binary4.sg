(spec u4
  (const
    (star (-b 1 _) (-b 2 _) (-b 3 _) (-b 4 _) ok)))

(def checker
  (galaxy
    (interaction
      (process
        #test
        #tested[b=>+b]))
    (expect (const (star ok)))))

(:: b1 (u4 / checker))
(def b1
  (const
    (star (b 1 1))
    (star (b 2 0))
    (star (b 3 0))
    (star (b 4 1))))

(:: b1 (u4 / checker))
(def b2
  (const
    (star (b 1 0))
    (star (b 2 0))
    (star (b 3 1))
    (star (b 4 1))))

(def and
  (const
    (star (-b1 arg 0) (-b2 arg X) (b arg 0))
    (star (-b1 arg 1) (-b2 arg X) (b arg X))))

(def or
  (const
    (star (-b1 arg 0) (-b2 arg X) (b arg X))
    (star (-b1 arg 1) (-b2 arg X) (b arg 1))))

(def xor
  (const
    (star (-b1 arg 1) (-b2 arg 0) (b arg 1))
    (star (-b1 arg 0) (-b2 arg 1) (b arg 1))
    (star (-b1 arg 0) (-b2 arg 0) (b arg 0))
    (star (-b1 arg 1) (-b2 arg 1) (b arg 0))))

'logical AND
(show-exec (process
  #b1[b=>+b1]
  #and[arg=>1] #and[arg=>2] #and[arg=>3] #and[arg=>4]
  #b2[b=>+b2]
  &kill))

'logical OR
(show-exec (process
  #b1[b=>+b1]
  #or[arg=>1] #or[arg=>2] #or[arg=>3] #or[arg=>4]
  #b2[b=>+b2]
  &kill))

'logical XOR
(show-exec (process
  #b1[b=>+b1]
  #xor[arg=>1] #xor[arg=>2] #xor[arg=>3] #xor[arg=>4]
  #b2[b=>+b2]
  &kill))
