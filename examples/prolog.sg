''' ARITHMETIC '''

' unary addition
(:= add {
  [(+add 0 Y Y)]
  [(-add X Y Z) (+add (s X) Y (s Z))]})

' 2 + 2 = R
(:= query1 [(-add <s s 0> <s s 0> R) R])
(show (exec #add @#query1))


''' FAMILY RELATIONSHIPS '''

' family facts
(:= family {
  [(+parent tom bob)]
  [(+parent tom liz)]
  [(+parent bob ann)]
  [(+parent bob pat)]
  [(+parent pat jim)]})

' grandparent relationship
(:= grandparent {
  [(-grandparent X Z) (-parent X Y) (+parent Y Z)]})

' who is tom's grandchild?
(:= query5 [(-grandparent tom Z) Z])
(show (exec #grandparent @(process #query5 #family)))


''' GRAPH TRAVERSAL '''

(:= graph {
  [(+from 1) (+to 2)]
  [(+from 1) (+to 3)]
  [(+from 3) (+to 2)]
  [(+from 3) (+to 4)]
  [(+from 2) (+to 5)]})

(:= composition [(-to X) (-from X)])

' is there a path between 1 and 4?
(:= query6 {
  @[(-from 1)]
  [(-to 4) ok]})

<show exec (process
  #query6
  { #graph #composition })>
