'static definition of constellation
x = +a; -a b.
y = #x.
z = -f(X).

'string literals
w = "hello world".

'cons
w = +w(0:1:0:1:e).

'full focus
show-exec @#w #w.

'show (literal) contellations
show a; b; c.

'print result of execution
show-exec a; b; c.
show exec a; b; c end

'inequality constraints
ineq = +f(a); +f(b); @-f(X) -f(Y) r(X Y) | X!=Y.

'interactive debugging of execution
'trace ineq.

'dynamic definition of constellation
c = process
  +n0(0).           'base constellation
  -n0(X) +n1(s(X)). 'interacts with previous
  -n1(X) +n2(s(X)). 'interacts with previous
end

'galaxy definition
g = galaxy
  test1 = +f(a) ok.
  test2 = +f(b) ok.
end
show #g.

'reactive effects
run +%print(X); -%print("hello world\n").

'access to field of a galaxy
show #g->test1.
show #g->test2.

'extend rays with a head function symbol
show-exec (+f(X); f(X))[=>+a].
show-exec (+f(X); f(X))[=>a].

'remove head function symbol from a ray
show-exec (+f(X); f(X))[+f=>].

'substitutions
show-exec (+f(X))[X=>+a(X)].
show-exec (+f(X))[+f=>+g].

'tokens (fillable named empty constellation)
show-exec (#1 #2)[#1=>+f(X) X][#2=>-f(a)].

'checkers & typechecking
checker = galaxy
  interaction = #tested #test.
  expect = ok.
end

nat = galaxy
  test =
    -nat(0) ok;
    -nat(s(N)) +nat(N).
end

0 :: nat [checker].
0 = +nat(0).

1 :: nat [checker].
1 = +nat(s(0)).

'plural typing
nat2 = -nat(X) ok.
2 :: nat [checker].
2 :: nat2.
2 = +nat(s(s(0))).
3 :: nat, nat2.
3 = +nat(s(s(s(0)))).

'galaxy with type declarations
show galaxy
  n1 :: nat [checker].
  n1 = +nat(0).
  n2 :: nat [checker].
  n2 = +nat(s(s(0))).
end

'interfaces
nat_pair = interface
  n :: nat [checker].
  m :: nat [checker].
end

g_pair :: nat_pair.
g_pair = galaxy
  n = +nat(0).
  m = +nat(0).
end
