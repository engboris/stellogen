'static definition of constellation
(:= x [
  [+a]
  [-a b]])

(:= y #x)

(:= z (-f X))

'string literals
'(:= w ["hello world"])

'cons
(:= w [(+w [0 1 0 1 e])])

'print result of execution
(:= x [(+f X) X])
(:= y (-f a))
<show exec (union @#x #y)>

'show (literal) contellations
(show [ [a] [b] [c] ])

'full focus
(show @[ [a] [b] [c] ])

'inequality constraints
(:= ineq [
  [(+f a)]
  [(+f b)]
  @[(-f X) (-f Y) (r X Y) | (!= X Y)]])
(show #ineq)
<show exec #ineq>

'interactive debugging of execution
'(trace #ineq)

'dynamic definition of constellation
(:= c (process
  (+n0 0)                 'base constellation
  [(-n0 X) (+n1 (s X))]   'interacts with previous
  [(-n1 X) (+n2 (s X))])) 'interacts with previous
(show #c)

'constellation with fields
(:= g [
  [+test1 [(+f a) ok]]
  [+test2 [(+f b) ok]]])
(show #g)

'field access and evaluation
<show eval exec (union #g @[-test1])>
<show eval exec (union #g @[-test2])>

'''
'reactive effects
(run (const
  (star (+&print X))
  (star (-&print "hello world\n"))))

'access to field of a galaxy
(show (get g test1))
(show (get g test2))

'extend rays with a head function symbol
(show-exec (const (star (+f X)) (star (f X)))[=>+a])
(show-exec (const (star (+f X)) (star (f X)))[=>a])

'remove head function symbol from a ray
(show-exec (const (star (+f X)) (star (f X)))[+f=>])

'substitutions
(show-exec
  (const (star (+f X)))[X=>(+a X)])
(show-exec (const (star (+f X)))[+f=>+g])
(show-exec (union #1 #2)
  [#1=>(const (star (+f X) X))]
  [#2=>(const (star (-f a)))])

'checkers & typechecking
(def checker (galaxy
  (interaction (union @#tested #test))
  (expect (const (star ok)))))

(spec nat
  (galaxy
    (test
      (const
        (star (-nat 0) ok)
        (star (-nat (s N)) (+nat N))))))

(:: 0 (nat /checker))
(def 0
  (const (star (+nat 0))))

(:: 1 (nat / checker))
(def 1
  (const (star (+nat (s 0)))))

'plural typing
(def nat2
  (const (star (-nat X) ok)))

(:: 2 nat)
(:: 2 nat2)
(def 2
  (const (star (+nat <s s /0>))))

(:: 3 nat nat2)
(def 3
  (const (star (+nat <s s s /0>))))

(:: 4 (nat / checker) (nat2 / checker))
(def 4
  (const (star (+nat <s s s s /0>))))

(interface nat_pair
  (:: n nat)
  (:: m nat))

(:: g_pair nat_pair)
(def g_pair
  (galaxy
    (n (const (star (+nat 0))))
    (m (const (star (+nat 0))))))

'galaxy with type declarations
(show (galaxy
  (:: n1 nat)
  (n1 (const (star (+nat 0))))
  (:: n2 nat)
  (n2 (const (star (+nat <s s /0>))))))

'import file
'(use examples automata)

'complex identifiers
(def (f a b)
  (const
    (star (function a b))))
(show #(f a b))
'''
