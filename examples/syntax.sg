'static definition of constellation
x = +a; -a b.
y = x.
z = -f(X).

'strings
w = "hello world".

'cons
w = +w(0:1:0:1:e).

'full focus
show-exec (@w) w.

'show (literal) contellations
show { a; b; c }.

'print result of execution
show-exec { a; b; c }.

'disequality constraints
show-exec -f(X) -f(Y) r(X Y).

'dynamic definition of constellation
c = process
	+n0(0).           'base constellation
	-n0(X) +n1(s(X)). 'interacts with previous
	-n1(X) +n2(s(X)). 'interacts with previous
end

'galaxy definition
g = galaxy
	test1: +f(a) ok.
	test2: +f(b) ok.
end

'reactive effects
show-exec +#print(X); -#print("hello world").

'access to field of a galaxy
show g->test1.
show g->test2.

'extend rays with a head function symbol
show-exec (+f(X); f(X))[=>+a].
show-exec (+f(X); f(X))[=>a].

'remove head function symbol from a ray
show-exec (+f(X); f(X))[+f=>].

'substitutions
show-exec (+f(X))[X=>+a(X)].
show-exec (+f(X))[+f=>+g].

'tokens (fillable named empty constellation)
show-exec (#1 #2)[1=>+f(X) X][2=>-f(a)].

'checkers & typechecking
checker = galaxy
	interaction: #tested #test.
	expect: { ok }.
end

nat = galaxy
	test:
		-nat(0) ok;
		-nat(s(N)) +nat(N).
end

0 :: nat [checker].
0 = +nat(0).

1 :: nat [checker].
1 = +nat(s(0)).
