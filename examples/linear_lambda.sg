' identity function (\x -> x)
(def id
  (const
    (star (+id [l X]) (+id [r X]))))

' id id
(def id_arg
  (const
    (star (ida [l X]) (+arg [l r X]))))

(def linker
  (const
    (star (-id X) (-arg X))
    (@star (+arg [r X]) (out X))))

(show-exec (union (union #id #id_arg) #linker))

' id x
(def x_arg
  (const
    (star (x X) (+arg [l X]))))

(def linker
  (const
    (star (-id X) (-arg X))
    (@star (+arg [r X]) (out X))))

(show-exec (union (union #id #x_arg) #linker))

' linear types
(spec (larrow a a)
  (galaxy
    (test1
      (const
        (star (-x X) (+parxy X))
        (star (-y X))
        (@star (-parxy X) ok)))
    (test2
      (const
        (star (-x X))
        (star (-y X) (+parxy X))
        (@star (-parxy X) ok)))))

(def adapter
  (const
    (star (-id [l X]) (+x X))
    (star (-id [r X]) (+y X))))

(def checker
  (galaxy
    (interaction (union #tested #test))
    (expect (const (star ok)))))

(:: vehicle ((larrow a a) / checker))
(def vehicle
  (union #id #adapter))
