(spec nat [
  [(-nat 0) ok]
  [(-nat (s N)) (+nat N)]])

(new-declaration (:: tested test)
  (:= test @(exec (union @#tested #test)))
  (== test ok))

(new-declaration (:: tested test fchecker)
  (:= test @(exec (union @#tested #test)))
  (== test [arg out]))

(spec (arrow nat nat) [
  [(+nat X) arg]
  [(-nat X) out]])

(:= 0 (+nat 0))
(:: 0 nat)

(:= 1 (+nat (s 0)))
(:: 1 nat)

(:= 2 <+nat s s 0>)
(:: 2 nat)

(:= add1 [(-nat X) (+nat (s X))])
(:: add1 (arrow nat nat) fchecker)

(:= is_empty [
  [(-nat 0) (res 1)]
  [(-nat (s _)) (res 0)]])

<show exec (union @#add1 #2)>
<show exec (union #is_empty @#0)>
<show exec (union #is_empty @#1)>
