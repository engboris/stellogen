'fill the #your_answer hole by following the specifications

(def checker
  (galaxy
    (interaction (union #tested #test))
    (expect (const (star ok)))))

(def not_spec
  (galaxy
    (test0 (const (@star (-not 0 1) ok)))
    (test1 (const (@star (-not 1 0) ok)))))

(:: not (not_spec / checker))
(def not
  #your_asnwer)

'how to print the truth table of NOT ?
(== table_not (const
  (star (table_not 0 1))
  (star (table_not 1 0))))
(def table_not
  (union
    #not
    #your_answer))

(def and_spec
  (galaxy
    (test00 (const (@star (-and 0 0 0) ok)))
    (test01 (const (@star (-and 0 1 0) ok)))
    (test10 (const (@star (-and 1 0 0) ok)))
    (test11 (const (@star (-and 1 1 1) ok)))))

(:: and (and_spec / checker))
(def and
  #your_answer)

'find a second way to compute AND
(:: and (and_spec / checker))
(def and2
  #your_answer)

(def or_spec
  (galaxy
    (test00 (const (@star (-or 0 0 0) ok)))
    (test01 (const (@star (-or 0 1 1) ok)))
    (test10 (const (@star (-or 1 0 1) ok)))
    (test11 (const (@star (-or 1 1 1) ok)))))

(:: or (or_spec / checker))
(def or
  #your_asnwer)

'find a second way to compute OR
(:: or2 (or_spec / checker))
(def or2
  #your_answer)

(def impl_spec
  (galaxy
    (test00 (const (@star (-impl 0 0 1) ok)))
    (test01 (const (@star (-impl 0 1 1) ok)))
    (test10 (const (@star (-impl 1 0 0) ok)))
    (test11 (const (@star (-impl 1 1 1) ok)))))

(:: impl (impl_spec / checker))
(def impl
  (exec (union (union #not #or)
  #your_answer)))

'find a second way to compute IMPLICATION
(:: impl2 (impl_spec / checker))
(def impl2
  (exec (union (union #not #or)
  #your_answer)))

'implement the excluded middle X \/ ~X
(== ex (const (star (+ex 1 1)) (star (+ex 0 1))))
(def ex
  (union (union #not #or)
  #your_answer))

'how to show the values of X, Y and Z for which X /\ ~(Y /\ Z) is true?
(show-exec
  #your_answer)
